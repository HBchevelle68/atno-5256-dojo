id: "atno5256"
name: ATNO-5256
type: welcome
award:
  emoji: ðŸ¤‘
modules:
- id: "hello"
- id: "paths"
- id: "commands"
- id: "man"
- id: "globbing"
- id: "piping"
- id: "variables"
- id: "processes"
- id: "permissions"
- id: "users"
- id: "chaining"
- id: "path"
- id: shellcode-injection
  name: Shellcode Injection
  description: |
    Welcome to **Shellcode Injection**, the deep dive into the choreography of code execution, where you don't just tap into the rhythm of a system, but you take the lead, guiding the entire ensemble of processes, threads, and instructions.
    
    Once the gates of execution are breached, what follows?
    Is it the end of the battle, or merely the beginning of a symphony?
    How does one communicate with the very core of a machine, dictating its every move, turning threats into opportunities, limitations into launching pads?
    
    For the hackers among us, the dance begins with shellcode.
    But mastering this dance isn't about merely memorizing steps; it's about improvisation, anticipation, and adaptation.
    
    Throughout this module, you'll dive deep into:
    - **Execution Environments**: Navigate the different arenas your shellcode might be thrown into, from the predictable world of memory allocation to the wild terrains of stack-based randomness.
    - **Filters & Constraints**: Often, the dance floor isn't clear. There might be traps set up, from the dreaded 'H' bytes checker to the cunning bubblesort sorter, ready to trip your shellcode up. Can you weave through these obstacles, adjusting your steps on the fly?
    - **Shellcoding Techniques**: With the right steps, even the most intricate of routines can be bypassed. Master techniques such as nop sleds, self-modifying code, position-independent practices, and the cunning of two-stage shellcodes to remain unstoppable.
    
    Dancing with a processor isn't just about knowing the steps, but understanding the language and semantics of each instruction.
    While you'll have the stage to yourself, we ensure you're never alone on this journey.
    Equip yourself with these invaluable scrolls of wisdom:
    - [x64.syscall.sh](https://x64.syscall.sh): Your cheat sheet for syscalls. A glance here, and you're always ahead.
    - [Syscalls Manpage](https://man7.org/linux/man-pages/man2/syscalls.2.html): Understand not just the calls, but their deeper implications.
    - [Felix Cloutier](https://www.felixcloutier.com/x86/): Dive into the heartbeats of instructions, ensuring you're always in step.    
    - [x86asm Reference](http://ref.x86asm.net/coder64.html): Decode the bytes into moves, turning the tables on any challenge.

    As you embark on this journey, remember, it's not just about taking control; it's about finesse, elegance, and the joy of the dance.
    In the vast assembly halls of x64, the processor awaits your cue.
    So, put on your dancing shoes, and let's speak the language of the processor!
  challenges:
  - id: level-1
    name: level1
    description: Write and execute shellcode to read the flag!
  - id: level-2
    name: level2
    description: Write and execute shellcode to read the flag, but a portion of your input is randomly skipped.
  - id: level-3
    name: level3
    description: Write and execute shellcode to read the flag, but your inputted data is filtered before execution.
  - id: level-4
    name: level4
    description: Write and execute shellcode to read the flag, but your inputted data is filtered before execution.
  - id: level-5
    name: level5
    description: Write and execute shellcode to read the flag, but the inputted data cannot contain any form of system call
      bytes (syscall, sysenter, int), can you defeat this?
  - id: level-6
    name: level6
    description: Write and execute shellcode to read the flag, but the inputted data cannot contain any form of system call
      bytes (syscall, sysenter, int), this challenge adds an extra layer of difficulty!
  - id: level-7
    name: level7
    description: Write and execute shellcode to read the flag, but all file descriptors (including stdin, stderr and stdout!)
      are closed.
  - id: level-8
    name: level8
    description: Write and execute shellcode to read the flag, but you only get 18 bytes.
  - id: level-9
    name: level9
    description: Write and execute shellcode to read the flag, but your input has data inserted into it before being executed.
  - id: level-10
    name: level10
    description: Write and execute shellcode to read the flag, but your input is sorted before being executed!
  - id: level-11
    name: level11
    description: Write and execute shellcode to read the flag, but your input is sorted before being executed and stdin is
      closed.
  - id: level-12
    name: level12
    description: Write and execute shellcode to read the flag, but every byte in your input must be unique.
  - id: level-13
    name: level13
    description: Write and execute shellcode to read the flag, but this time you only get 12 bytes!
  - id: level-14
    name: level14
    description: "Write and execute shellcode to read the flag, but this time you only get 6 bytes :)"